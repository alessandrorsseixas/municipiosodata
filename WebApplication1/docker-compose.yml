  version: '3.8'

  services:
    webapplication1:
        image: ${DOCKER_REGISTRY-}webapplication1
        container_name: webapplication1
        build:
          context: .
          dockerfile: WebApplication1/Dockerfile
        depends_on:
          - mongo
        networks:
          - app_network
        environment:
          - ASPNETCORE_ENVIRONMENT=Development
          - ASPNETCORE_URLS=http://+:5000;https://+:8001  # Habilitando HTTP e HTTPS nas portas 5000 e 8001
          - ASPNETCORE_HTTPS_PORT=8001
          - ASPNETCORE_Kestrel__Certificates__Default__Password=t3cnologia  # Senha do certificado
          - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx  # Caminho do certificado dentro do cont�iner
        volumes:
          - /mnt/c/alessandro/certificados/:/https
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:8080/"]  # Verifica se o servi�o est� respondendo
          interval: 30s
          retries: 5
          start_period: 10s
          timeout: 10s

    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
          - "5988:80"
          - "9488:443"
        volumes:
            - ./certificados/nginx.crt:/etc/nginx/ssl/nginx.crt
            - ./certificados/nginx.key.nopass:/etc/nginx/ssl/nginx.key
            - ./WebApplication1/nginx.conf:/etc/nginx/nginx.conf
        depends_on:
            - webapplication1
        networks:
          - app_network
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:5988"]  # Verifica se o Nginx est� funcionando
          interval: 30s
          retries: 5
          start_period: 10s
          timeout: 10s

    mongo:
        image: mongo
        container_name: mongo
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: mongo
        ports:
        - "27017:27017"
        volumes:
        - mongo_data:/data/db
        networks:
        - app_network
        healthcheck:
            test: ["CMD", "mongo", "--eval", "db.runCommand('ping')"]
            interval: 30s
            retries: 5
            start_period: 10s
            timeout: 10s

    redis:
      image: redis:latest
      container_name: redis
      restart: always
      volumes:
        - redis_data:/data
      networks:
        - app_network
      ports:
        - "6379:6379"

    rabbitmq:
      image: rabbitmq:3-management
      container_name: rabbitmq
      ports:
        - "5672:5672"         
        - "15672:15672"       
      environment:
        RABBITMQ_DEFAULT_USER: guest   
        RABBITMQ_DEFAULT_PASS: guest   
      volumes:
        - rabbitmq_data:/var/lib/rabbitmq  
    jupyter:
        image: jupyter/base-notebook:latest
        container_name: jupyter_notebook
        ports:
          - "8888:8888"
        networks:
        - app_network  
        volumes:
          - ./notebooks:/home/jovyan/work
          - jupyter_data:/home/jovyan/.jupyter
        environment:
          - JUPYTER_ENABLE_LAB=yes
        command: start-notebook.sh --NotebookApp.token='39de6643bd315050f128f04ba158545bea6df48953bbb965e7e4e10eefd240fe' --NotebookApp.password='123456'

    portainer:
      image: portainer/portainer-ce:latest
      container_name: portainer
      restart: always
      networks:
        - app_network
      volumes:
        - portainer_data:/data
        - /var/run/docker.sock:/var/run/docker.sock
      environment:
          - ADMIN_USERNAME=admin 
          - ADMIN_PASSWORD=123456 
      ports:
        - "9000:9000"
      depends_on:
        - mongo
        - redis
        - rabbitmq
        - jupyter

  volumes:
    mongo_data: {}
    redis_data: {}
    portainer_data: {} 
    rabbitmq_data: {}
    jupyter_data: {}

  networks:
    app_network:
      driver: bridge
